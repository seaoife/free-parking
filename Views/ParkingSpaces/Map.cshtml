@model IEnumerable<FreePark.Models.ParkingSpace>

@{
    ViewData["Title"] = "Map View";
}
<style>
    #map {
        width: 100%;
        height: 500px;
    }
</style>
<h1>Map View</h1>

<div id="map"></div>
<div>
    <button class="btn btn-primary" onclick="getGarageParking()">Garage Parkings</button>
    <button class="btn btn-primary" onclick="getParkingMeters()">Parking Meters</button>

    <a class="btn btn-primary btn-md" role="button" aria-disabled="true" asp-controller="ParkingSpaces" asp-action="Create">
        Free Parking
    </a>
</div>
<script>
    var map = L.map('map').setView([53.34164, -6.28417], 12);// the lat and long of the map and the 13 is the amount the mao will be zoomed in.
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var urlParams = new URLSearchParams(window.location.search);
    var streetName = urlParams.get('StreetName')
    console.log(streetName);

    $.ajax({
        url: '/ParkingSpaces/SearchForMap?StreetName=' + streetName,
        success: function (data) {
            console.log(data)
            $(data).each(function (index, item) {
                var lat = item.lat;
                var lng = item.lng;
                var msg = item.streetName + "</br>"
                    + "Total Spaces:" + item.totalSpace + "</br>"
                    + "Start time:" + item.startTime + "</br>"
                    + "End time:" + item.endTime + "</br>"
                    + item.notes;
                var popup = L.popup()
                    .setContent(msg);
                L.marker([lat, lng]).bindPopup(popup).addTo(map);
            });

            if (data.length >= 1) {
                var item = data[0];
                map.setView([item.lat, item.lng], 15)
            }
        },
    });

    function getGarageParking() {
        try {
            var greenIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            $.ajax({
                url: '/ParkingSpaces/GetGarageParkings',
                success: function (data) {
                    console.log(data)
                    $(data).each(function (index, item) {
                        var lat = item.garageLat;
                        var lng = item.garageLong;
                        L.marker([lat, lng], { icon: greenIcon }).bindPopup(item.garageName).addTo(map);
                    });
                },
            });
        } catch (err) {
            console.log(err)
        }
    }

    function getParkingMeters() {
        try {
            var greenIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            $.ajax({
                url: '/ParkingSpaces/GetStreets',
                success: function (data) {
                    console.log(data)
                    $(data).each(function (index, item) {
                        var lat = item.pmLocation1lat;
                        var lng = item.pmLocation1lng;
                        L.marker([lat, lng], { icon: greenIcon }).bindPopup("Parking Meter: \n" + item.streetName).addTo(map);
                    });
                },
            });
        } catch (err) {
            console.log(err)
        }
    }

</script>
