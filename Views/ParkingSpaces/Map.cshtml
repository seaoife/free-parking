@model IEnumerable<FreePark.Models.ParkingSpace>

@{
    ViewData["Title"] = "Map View";
}
<style>
    #map {
        width: 100%;
        height: 500px;
    }
    .btn btn-primary1 {
        color: #00cc44;
    }
</style>
<h1>Map View</h1>

<div id="map"></div>
<div>
    <button class="btn btn-primary1" onclick="getGarageParking()">Garage Parkings</button>
    <button class="btn btn-primary2" onclick="getParkingMeters()">Parking Meters</button>
    <button class="btn btn-primary3" onclick="getFreeParking()">Free Parking</button>
    <button class="btn btn-secondary4" onclick="clearMap()">Clear Map</button>
   
    <a class="btn btn-primary btn-md" role="button" aria-disabled="true" onclick="clearMap()" asp-controller="ParkingSpaces" asp-action="Search">
        Back to Search
    </a>
</div>
<script>
    var map = L.map('map').setView([53.34164, -6.28417], 16);// the lat and long of the map and the 13 is the amount the mao will be zoomed in.
    var fg = L.featureGroup().addTo(map);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var urlParams = new URLSearchParams(window.location.search);
    var streetName = urlParams.get('StreetName')

    $.ajax({
        url: '/ParkingSpaces/SearchForMap?StreetName=' + streetName,
        success: function (data) {
            $(data).each(function (index, item) {
                var lat = item.lat;
                var lng = item.lng;
                var msg = item.streetName + "</br>"
                    + "Total Spaces:" + item.totalSpace + "</br>"
                    + "Start time:" + item.startTime + "</br>"
                    + "End time:" + item.endTime + "</br>"
                    + item.notes;
                var popup = L.popup()
                    .setContent(msg);
                

                // for drawing line
                var pointA = new L.LatLng(item.streetStartlat, item.streetStartlong);
                var pointB = new L.LatLng(item.streetEndlat, item.streetEndlng);
                var line = [pointA, pointB];

                // check if its free parking
                var startTime = item.startTime;
                var endTime = item.endTime;
                var startDay = item.startDay;
                var endDay = item.endDay;

                var currentHr = (new Date()).getHours();
                var currentDay = (new Date()).getDay();
                // checks if its in timeframe
               
                var isFreeParking = (currentHr < startTime || endTime < currentHr) ||
                    (currentDay < startDay || endDay < currentDay);

                var firstpolyline = new L.polyline(line, {
                    // using ternary operator
                    color: isFreeParking ? 'green' : 'red',
                    weight: 5,
                    opacity: 0.5
                });

                L.marker([lat, lng]).bindPopup(popup).addTo(fg);
                firstpolyline.addTo(fg);
            });

            // to zoom in to that street
            if (data.length >= 1) {
                var item = data[0];
                map.setView([item.lat, item.lng], 17)
            }


        },
    });

    function getGarageParking() {
        try {
            var greenIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            $.ajax({
                url: '/ParkingSpaces/GetGarageParkings',
                success: function (data) {
                    $(data).each(function (index, item) {
                        var lat = item.garageLat;
                        var lng = item.garageLong;
                        L.marker([lat, lng], { icon: greenIcon }).bindPopup(item.garageName).addTo(fg);
                    });
                },
            });
        } catch (err) {
            console.log(err)
        }
    }

    function getParkingMeters() {
        try {
            var redIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            $.ajax({
                url: '/ParkingSpaces/GetStreets',
                success: function (data) {
                    $(data).each(function (index, item) {
                        var lat = item.pmLocation1lat;
                        var lng = item.pmLocation1lng;
                        L.marker([lat, lng], { icon: redIcon }).bindPopup("Parking Meter: \n" + item.streetName).addTo(fg);
                    });
                },
            });
        } catch (err) {
            console.log(err)
        }
    }
    function getFreeParking() {
        try {
            $.ajax({
                url: '/ParkingSpaces/GetStreets',
                success: function (data) {
                    $(data).each(function (index, item) {
                        var lat = item.free_paidlat;
                        var lng = item.free_paidlng;

                        // for drawing line
                        var pointA = new L.LatLng(item.streetStartlat, item.streetStartlong);
                        var pointB = new L.LatLng(item.streetEndlat, item.streetEndlng);
                        var line = [pointA, pointB];

                        // check if its free parking
                        var startTime = item.startTime;
                        var endTime = item.endTime;
                        var startDay = item.startDay;
                        var endDay = item.endDay;

                        var currentHr = (new Date()).getHours();
                        var currentDay = (new Date()).getDay();
                        // checks if its in timeframe

                        var isFreeParking = (currentHr < startTime || endTime < currentHr) ||
                            (currentDay < startDay || endDay < currentDay);

                        var firstpolyline = new L.polyline(line, {
                            // using ternary operator
                            color: isFreeParking ? 'green' : 'red',
                            weight: 5,
                            opacity: 0.5
                        });

                        // Creates a red marker with the coffee icon
                        var customMarker = L.ExtraMarkers.icon({
                            icon: 'fa-car',
                            markerColor: isFreeParking ? 'green' : 'red',
                            shape: 'square',
                            prefix: 'fa'
                        });

                        var msg = item.streetName + "</br>"
                            + "Total Spaces:" + item.totalSpace + "</br>"
                            + "Start time:" + item.startTime + "</br>"
                            + "End time:" + item.endTime + "</br>"
                            + item.notes;
                        var popup = L.popup()
                            .setContent(msg);

                        L.marker([lat, lng], { icon: customMarker })
                            .bindPopup(popup)
                            .addTo(fg);
                        firstpolyline.addTo(fg);
                    });
                },
            });
        } catch (err) {
            console.log(err)
        }
    }
    function clearMap() {
        fg.clearLayers();
        //map.eachLayer(function (layer) {
        //    if (layer instanceof L.MarkerClusterGroup()) {
        //        map.removeLayer(layer)
        //    }
        //});
    }

</script>
